//C
void swap(int *a, int *b){
  int temp = *a;
  *a = *b;
  *b = temp;
}

int Partition(int a[], int low, int high){
  int pivot = a[low];
  while(low<high){
    while(low<high && a[high]>=pivot){
      --high; 
    }swap(&a[high], &a[low]);//从前面开始找到第一个小于pivot的元素，放到low位置
    
    while(low<high && a[low]<=pivot){
      ++low; 
    }swap(&a[high], &a[low]);//从前面开始找到第一个大于pivot的元素，放到high位置
    
  }//low<high_while_end
  a[low] = pivot;
  return low;
}//int_end

void QuickSort(int a[], int low, int high){
  if(low<high){
    int bar = Partition1(a, low, high);
    QuickSort1(a, low, bar-1); //对切割点左半部分快排
    QuickSort1(a, bar+1, high); //对切割点右半部分快排
  }
}

//Pseudocode
Partition(A,p,r) //A[p...r]
  x = A[r]
  i = p-1
  for j=p to r-1
    if A[j]<x
      i = i+1
      exchange A[i] with A[j]
  exchange A[i+1] with A[r]
  return i+1

QuickSort(A,p,r)
  if p<r
    q = Partition(A,p,r)
    QuickSort(A,p,q-1)
    QuickSort(A,q+1,r)

 
